<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hs.meetme.mypage.mapper.MypageMapper">
  <!-- 유저 태그 조회해서 가져오기 -->
  <select id="getUserTags" resultType="UserTagsVO">
    SELECT user_id, tag_id
    FROM user_tags
    WHERE user_id = #{userId}
  </select>
<!-- ㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁ -->
  <!-- 저장된 코스 삭제 -->
  <delete id="deleteCourseLike" parameterType="MypageCourseVO">
    DELETE
    FROM
      course_like
    WHERE
      course_id = #{courseId} AND user_id = #{userId}
  </delete>
  
  <update id="deleteCourse" parameterType="MypageCourseVO">
    UPDATE course
    SET course_open = 'n'
    WHERE course_id = #{courseId}
  </update>
  <delete id="deleteCourseLike2" parameterType="MypageCourseVO">
    DELETE
    FROM course_like
    WHERE course_id = #{courseId}
  </delete>

  <!-- 저장된 코스 보기 -->
  	<!-- 코스 검색기능 -->
    <sql id = "courseSearch">
          <if test="cri.category=='B'.toString()">
            user_id=#{cri.userId} AND
          </if>
          <if test="cri.category=='C'.toString()">
            user_id!=#{cri.userId} AND
          </if>

         <trim prefix="(" suffix=") AND " prefixOverrides="OR">
           <foreach collection="cri.typeArr" item="type">
             <trim prefix="OR">
               <choose>
	               <when test="type=='T'.toString()">
	                 course_name LIKE '%'||#{cri.keyword}||'%' 
	               </when>
	               <when test="type=='C'.toString()">
	                 course_name LIKE '%'||#{cri.keyword}||'%'
	               </when>
               </choose>
             </trim>
           </foreach>
         </trim>
    </sql>
    <!--코스 페이징을 위한 -->
    <select id="getTotalCourseCount" resultType="int">
      SELECT COUNT(*)
		FROM
		(SELECT
		        DISTINCT
		        a.user_id,
		        a.course_id,
		        a.course_name
		FROM course a, course_order b
		WHERE a.course_id IN (SELECT course_id FROM course_like WHERE user_id = #{userId}) AND a.course_id=b.course_id
		UNION ALL
		SELECT
		       DISTINCT
		       a.user_id,
		       a.course_id,
		       a.course_name
		FROM course a, course_order b
		WHERE a.user_id=#{userId} AND a.course_id=b.course_id AND a.course_open='y')		
	  WHERE 
	    <include refid="courseSearch"></include>
	  course_id >0
    </select>
    <!-- 나의 코스 리스트 SELECT -->
    <select id="getCourseList" resultType="MyPageCourseVO">
  	  SELECT *
      FROM
			(SELECT ROW_NUMBER()OVER(ORDER BY x.course_id DESC) rn,
			  x.user_id,
			  x.course_id,
			  x.course_name,
			  x.course_state,
			  x.course_open,
			  x.region,
			  x.sum_cost
			FROM
			(SELECT
			  DISTINCT
			  a.user_id,
			  a.course_id,
			  a.course_name,
			  a.course_state,
			  a.course_open,
			  a.region,
			  (SELECT sum_cost FROM (SELECT course_id, SUM(avg_cost) sum_cost FROM course_order GROUP BY course_id) c WHERE c.course_id = b.course_id) sum_cost
			FROM course a, course_order b
			WHERE a.course_id IN (SELECT course_id FROM course_like WHERE user_id = #{userId}) AND a.course_id=b.course_id
			UNION ALL
			SELECT
			  DISTINCT
			  a.user_id,
			  a.course_id,
			  a.course_name,
			  a.course_state,
			  a.course_open,
			  a.region,
			  (SELECT sum_cost FROM (SELECT course_id, SUM(avg_cost) sum_cost FROM course_order GROUP BY course_id) c WHERE c.course_id = b.course_id) sum_cost
			FROM course a, course_order b
			WHERE a.user_id=#{userId} AND a.course_id=b.course_id AND a.course_open='y') x
         <where>
            <include refid="courseSearch"></include>
         
             <![CDATA[ ROWNUM <= #{cri.pageNum} * #{cri.amount} ]]>
                       
         </where> )
      WHERE rn > (#{cri.pageNum}-1) * #{cri.amount}
	</select>
	<!-- 나의 코스 리스트 상세정보들 SELECT -->
    <select id="getCourseDetailList" resultType="MyPageCourseVO">
		SELECT
		  a.user_id,
		  a.course_id,
		  a.course_name,
		  a.course_state,
		  a.course_open,
		  a.region,
		  b.course_order,
		  b.place_id,
		  c.place_name,
		  c.address,
		  c.place_phone,
		  c.avg_cost,
		  c.description,
		  c.region,
		  c.thumbnail_href
		FROM course a, course_order b, place c
		WHERE a.course_id IN (SELECT course_id FROM course_like WHERE user_id = #{userId}) AND a.course_id=b.course_id AND b.place_id =c.place_id
		UNION ALL
		SELECT
		  a.user_id,
		  a.course_id,
		  a.course_name,
		  a.course_state,
		  a.course_open,
		  a.region,
		  b.course_order,
		  b.place_id,
		  c.place_name,
		  c.address,
		  c.place_phone,
		  c.avg_cost,
		  c.description,
		  c.region,
		  c.thumbnail_href
		FROM course a, course_order b, place c
		WHERE a.user_id=#{userId} AND a.course_id=b.course_id AND b.place_id =c.place_id AND a.course_open='y'
		ORDER BY course_id
	</select>
	
<!-- ㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁ -->	
	<!-- 게시글 검색기능 -->
    <sql id = "postSearch">
         <trim prefix="(" suffix=") AND " prefixOverrides="OR">
           <foreach collection="cri.typeArr" item="type">
             <trim prefix="OR">
               <choose>
	               <when test="type=='T'.toString()">
	                 post_title LIKE '%'||#{cri.keyword}||'%' 
	               </when>
	               <when test="type=='C'.toString()">
	                 post_content LIKE '%'||#{cri.keyword}||'%'
	               </when>
	               <when test="type=='D'.toString()"> 
	                 post_distinct LIKE '%'||#{cri.keyword}||'%'
	               </when>
               </choose>
             </trim>
           </foreach>
         </trim>
    </sql>
    <!--게시글 페이징을 위한 -->
    <select id="getTotalPostCount" resultType="int">
      SELECT COUNT(*) FROM post
      WHERE
        <include refid="postSearch"></include>
      post_id >0 AND user_id=#{userId}
    </select>
	<!-- 내가 쓴글 리스트 SELECT -->
	<select id="getPostList" resultType="PostVO">
  	  SELECT *
      FROM
		 (SELECT /*+ INDEX_DESC(a post_updated_idx) */
		 ROWNUM rn, 
		 a.post_id, 
		 a.post_title, 
		 a.post_updated,
		 a.user_id,
		 a.hit,
		 a.post_distinct,
		 (SELECT count(*) FROM post_like b WHERE a.post_id = b.post_id) post_like_count
		 FROM post a
         <where>
            <include refid="postSearch"></include>
         
             <![CDATA[ ROWNUM <= #{cri.pageNum} * #{cri.amount} ]]>
                       AND user_id=#{userId}
         </where> )
      WHERE rn > (#{cri.pageNum}-1) * #{cri.amount} 
	</select>	
	<!-- 내가 쓴글 갯수 -->
	<select id="getPostCount" resultType="int">
	  SELECT count(*)
      FROM post
      WHERE user_id=#{userId}
	</select>

<!-- ㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁ -->	

	<!-- 댓글 검색기능 -->
    <sql id = "commentSearch">
         <trim prefix="(" suffix=") AND " prefixOverrides="OR">
           <foreach collection="cri.typeArr" item="type">
             <trim prefix="OR">
               <choose>
	               <when test="type=='C'.toString()">
	                 com_content LIKE '%'||#{cri.keyword}||'%'
	               </when>
	               <when test="type=='D'.toString()"> 
	                 com_distinct LIKE '%'||#{cri.keyword}||'%'
	               </when>
               </choose>
             </trim>
           </foreach>
         </trim>
    </sql>
    <!--댓글 페이징을 위한 -->
    <select id="getTotalCommentCount" resultType="int">
      SELECT COUNT(*) FROM post_comment
      WHERE
        <include refid="commentSearch"></include>
      comment_id >0 AND user_id=#{userId}
    </select>		
	<!-- 내가 쓴 댓글 리스트 SELECT -->
	<select id="getCommentList" resultType="CommentVO">
     SELECT *
     FROM  
         (SELECT /*+ INDEX_DESC(a post_com_updated_idx) */
          ROWNUM rn,
          a.comment_id,
		  a.com_content,
	      a.com_created,
		  a.com_updated,
		  a.user_id,
		  a.post_id,
		  a.log_id,
		  a.com_distinct
	      FROM post_comment a
         <where>
            <include refid="commentSearch"></include>
         
             <![CDATA[ ROWNUM <= #{cri.pageNum} * #{cri.amount} ]]>
                       AND log_id IS NULL
                       AND user_id=#{userId}
         </where> )
      WHERE rn > (#{cri.pageNum}-1) * #{cri.amount}
	</select>
    <!-- 내가 쓴 댓글 갯수 -->
	<select id="getCommentCount" resultType="int">
	  SELECT count(*)
      FROM post_comment
      WHERE user_id=#{userId}
	</select>
	
<!-- ㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁ -->
		
	<!-- 회원정보 SELECT -->

	<select id="getMyinfo" resultType="MypageUserInfoVO">
	  SELECT 
	  a.user_id,
	  a.name,
	  a.email,
	  a.nickname,
	  a.password,
	  a.phone_num,
	  a.created,
	  a.updated,
	  a.birth_year,
	  a.birth_day,
	  a.address1,
	  a.address2,
	  a.address3,
	  a.couple_status,
	  a.role,
	  b.img_url

      FROM user_info a LEFT OUTER JOIN img b
      ON a.img_id = b.img_id
      WHERE user_id = #{userId}
	</select>
		
	<!-- 회원정보 비밀번호 확인 -->
	<select id="userSelectPassword" resultType="MypageUserInfoVO">
	  SELECT password
	  FROM user_info
	  WHERE user_id = #{userId}
	</select>
	
	<!-- 회원정보 수정 (패스워드) -->
	<update id="userUpdatePassword" parameterType="MypageUserInfoVO">
		UPDATE user_info
		SET password=#{password}
		    updated=sysdate
	  WHERE user_id = #{userId}
	</update>
	
	<!-- 회원정보 닉네임 중복확인 -->
	<select id="userSelectNickName" resultType="MypageUserInfoVO">
	  SELECT nickname
	  FROM user_info
	  WHERE nickname=#{nickName}
	</select>
	
	<!-- 회원정보 수정 (닉네임) -->
	<update id="userUpdateNickName" parameterType="MypageUserInfoVO">
		UPDATE user_info
		SET nickname = #{nickName},
		    updated=sysdate
		WHERE user_id = #{userId}
	</update>
	
	<!-- 회원정보 수정 (전화번호) -->
<!-- 	<update id="" parameterType="">
		UPDATE userinfo
		SET phone_num = #{phoneNum}
		WHERE email = #{email}
	</update> -->
	
	<!-- 회원정보 수정 (주소) -->
	<update id="updateAddress" parameterType="MypageUserInfoVO">
		UPDATE user_info
		SET address1=#{address1},
		    address2=#{address2},
		    address3=#{address3},
		    updated=sysdate
		WHERE user_id= #{userId}
	</update>
	
<!-- ㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁ -->
	
	<!-- 알림내역 회원별 SELECT -->
<!-- 	<select id="">
	  SELECT 
      notice_id,
      user_received,
      notice_content,
      notice_date,
      notice_confirmed,
      user_sent
      FROM
      notification
      WHERE
      user_received=#{userReceived}
      ORDER BY notice_date DESC
	</select> -->
	<!-- 알림내역 개별삭제 -->
<!-- 	<delete id="">
	  DELETE
	  FROM notification
	  WHERE notice_id=#{noticeId}
	</delete> -->
	<!-- 알림내역 모두삭제 -->
<!-- 	<delete id="">
	  DELETE
	  FROM notification
	  WHERE user_received=#{userReceived}
	</delete> -->
	
</mapper>