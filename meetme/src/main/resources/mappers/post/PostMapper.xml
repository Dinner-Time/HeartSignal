<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hs.meetme.post.mapper.PostMapper">

   <select id="getCMList" resultType="PostVO">
	select 
	ot.* 
	from
	( select 
	    rownum rn,sp.* 
	from
	    (select distinct p.*,
	    (select count(*) from post_comment a where p.post_id = a.post_id) comments,
	    (select count(*) from post_like b where p.post_id = b.post_id) likes,
	    (select nickname from user_info where user_id=p.user_id) "nickname",
	    (select region from course where course_id = p.course_id) "region"
	    from post p
	    left outer join
	    post_comment c
	    on p.post_id = c.post_id
	    left outer join
	    post_like l
	    on p.post_id = l.post_id
	    <where>
            <include refid="postSearch"></include>
   		</where>
   		<!-- p.post_id >0 -->
	    order by p.post_id desc) sp 
	    where   <![CDATA[ rownum  <= #{pageNum} * #{amount}  ]]>) ot
	where ot.rn  > (#{pageNum}-1) * #{amount} 


   </select>

   <!-- 페이징 처리 위함 -->
   <select id="getTotalCmNum" resultType="int">
      SELECT COUNT(*) FROM post
      <where>
        <include refid="postSearch"></include>
      <!-- post_id >0 -->
      </where>
   </select>
   
   <select id = "getCmNum" resultType="int">
   	SELECT count(*)
      FROM post
   </select>
   
   
   <!-- 게시글 검색기능 -->
    <sql id = "postSearch">
         <trim prefix="(" suffix=") ">
           <foreach collection="typeArr" item="type">
             <trim>
               <choose>
                  <when test="type=='T'.toString()">
                    post_title LIKE '%'||#{keyword}||'%' 
                  </when>
                  <when test="type=='C'.toString()">
                    post_content LIKE '%'||#{keyword}||'%'
                  </when>
                  <when test="type=='D'.toString()"> 
                    post_distinct LIKE '%'||#{keyword}||'%'
                  </when>
               </choose>
             </trim>
           </foreach>
         </trim>
    </sql>


   <select id="getPost" parameterType="long" resultType="PostVO">
	  select
      a.*,
      b.nickname,
      c.img_url
      from
      post a join user_info b on a.user_id = b.user_id join img c on b.img_id = c.img_id where post_id=#{postId}

   </select>
   
   <select id="getCourse" resultType="com.hs.meetme.mypage.domain.MyPageCourseVO">
   		select a.course_id, a.course_name, b.avg_cost, c.address, c.place_name, c.thumbnail_href, c.region, c.longtitude, c.latitude
		from course a join course_order b 
		on a.course_id = b.course_id
        join place c
        on c.place_id = b.place_id
		where course_open ='y' and a.course_id=#{courseId}
		order by a.course_id, b.course_order
   </select>

   <!-- 커뮤니티 게시판 입력하기 -->
   <!-- userId 뒤에 courseId 넣어주기-->
   <insert id="CMInsert">
      insert into post
      values(SEQ_POST.nextval,#{postTitle},#{postContent},sysdate,sysdate,#{userId},#{courseId},0,'c')
   </insert>

   <!-- 조회수 up -->
   <update id="countHit">
      update post set hit=hit+1 where post_id=#{postId}
   </update>

   <!-- 수정하기 -->
   <update id="postUpdate">
      update post set post_title=#{postTitle},
      post_content=#{postContent}, post_updated=sysdate where
      post_id=#{postId}
   </update>

   <!-- 삭제하기 -->
   <delete id="postDelete">
      delete post where post_id=#{postId}
   </delete>

   <!-- 커뮤니티 댓글 가져오기 - 한 페이지 보기에 넣기위함.(comment, post, account) -->
   <select id="commentCM" resultType="CommentVO"  parameterType="long">
      select a.post_id, b.*,
      (select nickname from user_info where user_id=b.user_id)"nickname",
      (select d.img_url from user_info p join img d on p.img_id = d.img_id where p.user_id=b.user_id) "imgUrl"
      from post a join post_comment b
      on a.post_id = b.post_id
      where b.com_distinct='c'
      and a.post_id=#{postId}
   </select>
   
   <!-- comment개수 구하기 -->
   <select id="countCM" resultType="int" parameterType="long">
      select count(*) from  post a join post_comment b on a.post_id = b.post_id where a.post_id=#{postId}
   </select>

   <!-- 커뮤니티 댓글 입력 -->
   <insert id="insertCMComment">
      INSERT INTO
         post_comment
      VALUES
         (seq_comment.NEXTVAL,
         #{comContent},
         sysdate,
         sysdate,
         #{userId},
         #{postId},
         null,
         'c')
      <selectKey keyProperty="commentId" order="AFTER" resultType="string">
         SELECT seq_comment.CURRVAL FROM dual
      </selectKey>
   </insert>


   <update id="commentUpdate">
      update post_comment 
      set com_content=#{comContent} , com_updated = sysdate
      where comment_id =#{commentId}
   </update>


   <delete id="commentDelete">
      DELETE FROM
      post_comment
      WHERE
      comment_id = #{commentId}
   </delete>

   <!-- 글 좋아요(스크랩) -->
   <insert id="postLike">
      insert into post_like values(#{postId}, #{userId})
   </insert>
   
   
   <!-- 코스 스크랩하기 -->
   <insert id="scrapCourse">
   		insert into course_like values(#{userId},#{courseId})
   </insert>
   
   <!-- 나의 코스 리스트 -->
  <!--  코스아이디, 코스 이름," 첫번째" 장소 이름, 장소 별 가격, 장소별 이미지  가져옴. 	-->
    <select id="getCourseList" resultType="MyPageCourseVO">
  	 select a.course_name, 
        b.course_id, 
        c.place_name,
        c.avg_cost,
        c.place_id,
        c.region,
        c.thumbnail_href
		from course a 
		join (select * from course_order where course_order = 1) b 
		    on a.course_id = b.course_id 
		join place c
		    on b.place_id = c.place_id
		where a.user_id=#{userId}
		order by b.course_id        
	</select>
	
	
	<!-- 코스 스크랩 가져오기 -->
	<select id="getCourseScrap" parameterType="PostVO" resultType="int" >
		select count(*) from course_like where user_id=#{userId} and course_id=#{courseId}
	</select>
	
	<!-- 게시글 스크랩 가져오기 -->
	<select id="getPostLike" parameterType="PostVO" resultType="int">
		select count(*) from post_like where user_id=#{userId} and post_id=#{postId}
	</select>
	
	<!-- 게시글 스크랩 취소하기 -->
	<delete id="postLikeCancle">
		delete from post_like where post_id=#{postId} and user_id=#{userId}
	</delete>
	
	<!-- 코스 스크랩 취소하기 -->
	<delete id="scrapCancel">
		delete from course_like where course_id=#{courseId} and user_id=#{userId}
	</delete>
   
</mapper>